// services/responseFormatter.ts
import type { Client, Delivery, Product } from '@/types';

interface FormatOptions {
  includeEmoji?: boolean;
  includePrices?: boolean;
  groupByZone?: boolean;
}

class ResponseFormatter {
  private static readonly DEFAULT_OPTIONS: FormatOptions = {
    includeEmoji: true,
    includePrices: true,
    groupByZone: false
  };

  // Formatage des informations client
  formatClientInfo(client: Client, options: FormatOptions = {}): string {
    const opts = { ...ResponseFormatter.DEFAULT_OPTIONS, ...options };
    const lines: string[] = [];

    // En-t√™te
    lines.push(`${opts.includeEmoji ? 'üè™ ' : ''}${client.Nom_Client}`);
    
    // Zone
    if (client.zone) {
      lines.push(`${opts.includeEmoji ? 'üìç ' : ''}Zone: ${client.zone}`);
    }

    // T√©l√©phone
    if (client.Tel) {
      lines.push(`${opts.includeEmoji ? 'üìû ' : ''}Tel: ${client.Tel}`);
    }

    // Adresse
    if (client.Adresse) {
      lines.push(`${opts.includeEmoji ? 'üè† ' : ''}Adresse: ${client.Adresse}`);
    }

    // Informations suppl√©mentaires
    if (client.Congelateur === 'oui') {
      lines.push(`${opts.includeEmoji ? '‚ùÑÔ∏è ' : ''}Poss√®de un cong√©lateur`);
    }
    
    if (client.Delais) {
      lines.push(`${opts.includeEmoji ? '‚è±Ô∏è ' : ''}D√©lai de paiement: ${client.Delais}`);
    }

    return lines.join('\n');
  }

  // Formatage d'une liste de clients
  formatClientsList(clients: Client[], options: FormatOptions = {}): string {
    const opts = { ...ResponseFormatter.DEFAULT_OPTIONS, ...options };
    
    if (opts.groupByZone) {
      // Grouper par zone
      const clientsByZone = clients.reduce((acc, client) => {
        const zone = client.zone || 'Zone non sp√©cifi√©e';
        if (!acc[zone]) acc[zone] = [];
        acc[zone].push(client);
        return acc;
      }, {} as Record<string, Client[]>);

      const lines: string[] = [];
      for (const [zone, zoneClients] of Object.entries(clientsByZone)) {
        lines.push(`\n${opts.includeEmoji ? 'üìç ' : ''}${zone}:`);
        zoneClients.forEach(client => {
          lines.push(`  ‚Ä¢ ${client.Nom_Client}${client.Tel ? ` (${client.Tel})` : ''}`);
        });
      }
      return lines.join('\n');
    } else {
      // Liste simple
      return clients.map(client => 
        `‚Ä¢ ${client.Nom_Client} ${client.zone ? `(${client.zone})` : ''}`
      ).join('\n');
    }
  }

  // Formatage des livraisons
  formatDelivery(delivery: Delivery, options: FormatOptions = {}): string {
    const opts = { ...ResponseFormatter.DEFAULT_OPTIONS, ...options };
    const lines: string[] = [];

    // En-t√™te de la livraison
    lines.push(`${opts.includeEmoji ? 'üì¶ ' : ''}Livraison #${delivery.id}`);
    lines.push(`${opts.includeEmoji ? 'üìÖ ' : ''}Date: ${delivery.date}`);

    // D√©tails des produits
    lines.push('\nProduits:');
    delivery.products.forEach(product => {
      const productLine = opts.includePrices
        ? `‚Ä¢ ${product.quantity}x ${product.name} (${product.price} DNT/unit√© = ${product.total} DNT)`
        : `‚Ä¢ ${product.quantity}x ${product.name}`;
      lines.push(productLine);
    });

    // Total
    if (opts.includePrices) {
      lines.push(`\n${opts.includeEmoji ? 'üí∞ ' : ''}Total: ${delivery.total} DNT`);
    }

    return lines.join('\n');
  }

  // Formatage des messages de clarification
  formatClarificationRequest(matches: Client[]): string {
    const lines: string[] = [];
    lines.push('J\'ai trouv√© plusieurs correspondances. Pouvez-vous pr√©ciser lequel ?');
    
    matches.forEach(client => {
      lines.push(`‚Ä¢ ${client.Nom_Client} (${client.zone || 'Zone non sp√©cifi√©e'})`);
    });

    return lines.join('\n');
  }

  // Formatage des erreurs
  formatError(error: string, code?: string): string {
    return `‚ùå ${error}${code ? ` (Code: ${code})` : ''}`;
  }

  // Formatage d'une r√©ponse de succ√®s
  formatSuccess(message: string): string {
    return `‚úÖ ${message}`;
  }

  // Formatage des statistiques
  formatStats(stats: any): string {
    const lines: string[] = [];
    
    if (stats.totalLivraisons) {
      lines.push(`üìä Total des livraisons: ${stats.totalLivraisons}`);
    }
    
    if (stats.chiffreAffaires) {
      lines.push(`üí∞ Chiffre d'affaires: ${stats.chiffreAffaires} DNT`);
    }
    
    if (stats.topProduits) {
      lines.push('\nüèÜ Produits les plus vendus:');
      stats.topProduits.forEach((p: any) => {
        lines.push(`  ‚Ä¢ ${p.name}: ${p.quantity} unit√©s`);
      });
    }

    return lines.join('\n');
  }

  // Formatage des suggestions
  formatSuggestions(suggestions: string[]): string {
    if (!suggestions.length) return '';
    return `\nüí° Suggestions:\n${suggestions.map(s => `‚Ä¢ ${s}`).join('\n')}`;
  }

  // Formatage des actions possibles
  formatActions(actions: string[]): string {
    if (!actions.length) return '';
    return `\n‚ö° Actions possibles:\n${actions.map(a => `‚Ä¢ ${a}`).join('\n')}`;
  }
}

export const responseFormatter = new ResponseFormatter();